using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using AudioLibrary;
using AudioLibrary.SoundFeatures;

namespace SpeechRecognitionLibrary
{
    [DataContract]
    public class IsolatedWordRecognizer
    {
        #region Constants
        private const int DEFAULT_SOUND_EXTRACTION_MOVING_AVERAGE_LENGTH = 10;
        private const double DEFAULT_SOUND_EXTRACTION_THRESHOLD = 300;
        private const double DEFAULT_PRE_EMPHASIS_THRESHOLD_FREQUENCY = 165;
        private const double DEFAULT_FRAME_DURATION = 0.030;
        private const double DEFAULT_FRAME_SHIFT = 0.010;
        private const double DEFAULT_ALPHA = 0.46;
        private const int DEFAULT_NUMBER_OF_VALUES_PER_FEATURE = 40;
        private const int DEFAULT_AUTOCORRELATION_ORDER = 8;
        private const int DEFAULT_LPC_ORDER = 8;
        private const int DEFAULT_CEPSTRAL_ORDER = 12;
        #endregion

        #region Fields
        private string name;
        // Preprocessing parameters:
        private int soundExtractionMovingAverageLength;           //   
        private double soundExtractionThreshold;                  //   
        private double preEmphasisThresholdFrequency;             //   
        private double frameDuration;                             //   
        private double frameShift;                                //   
        private double alpha;                                     //   For the Hamming windows
        private int numberOfValuesPerFeature;                     //   For feature interpolation
        
        // Sound feature parameters:
        private int autoCorrelationOrder;
        private int lpcOrder;
        private int cepstralOrder;
        
        // Sound feature sets (one set for each recognizable word, generated by taking the
        // average over many instance of a word).
        private List<SoundFeatureSet> averageSoundFeatureSetList;

      // private SoundFeatureSet soundFeatureSet; // Features obtained for the sound considered (see RecognizeSingle()).

        private List<double> weightList;                          // Weights for the sound features, used when forming the deviation measure:
        private double recognitionThreshold;
        #endregion

        #region Events
        public event EventHandler AvailableSoundsChanged = null;
        #endregion

        #region Constructor
        public IsolatedWordRecognizer()
        {
            name = "";
            soundExtractionMovingAverageLength = DEFAULT_SOUND_EXTRACTION_MOVING_AVERAGE_LENGTH;
            soundExtractionThreshold = DEFAULT_SOUND_EXTRACTION_THRESHOLD;
            preEmphasisThresholdFrequency = DEFAULT_PRE_EMPHASIS_THRESHOLD_FREQUENCY;
            frameDuration = DEFAULT_FRAME_DURATION;
            frameShift = DEFAULT_FRAME_SHIFT;
            alpha = DEFAULT_ALPHA;
            numberOfValuesPerFeature = DEFAULT_NUMBER_OF_VALUES_PER_FEATURE;
            autoCorrelationOrder = DEFAULT_AUTOCORRELATION_ORDER;
            lpcOrder = DEFAULT_LPC_ORDER;
            cepstralOrder = DEFAULT_CEPSTRAL_ORDER;
            weightList = new List<double>();
            for (int ii = 0; ii < (autoCorrelationOrder + lpcOrder + (cepstralOrder-1) + 1); ii++)
            {
                weightList.Add(1); // Default value (all features weighted equally).
            }
            recognitionThreshold = 1.0; // Default value (arbitrary - typically requires modification...)
        }
        #endregion

        #region Private methods
        protected void OnAvailableSoundsChanged()
        {
            if (AvailableSoundsChanged != null)
            {
                EventHandler handler = AvailableSoundsChanged;
                handler(this, EventArgs.Empty);
            }
        }
        #endregion

        #region Public methods
        public IWRRecognitionResult RecognizeSingle(WAVSound sound)
        {
            // Compute the features of the current sound
            sound.SubtractMean();
            double startTime = sound.GetFirstTimeAboveThreshold(0, soundExtractionMovingAverageLength,
                                                                        soundExtractionThreshold);
            double endTime = sound.GetLastTimeAboveThreshold(0, soundExtractionMovingAverageLength,
                                                                     soundExtractionThreshold);
            WAVSound extractedInstance = sound.Extract(startTime, endTime);
            if (extractedInstance == null) { return null; } // 20170114
            extractedInstance.PreEmphasize(preEmphasisThresholdFrequency);
            WAVFrameSet frameSet = new WAVFrameSet(extractedInstance, frameDuration, frameShift);
            frameSet.ApplyHammingWindows(alpha);
            SoundFeatureSet soundFeatureSet = new SoundFeatureSet();
            List<SoundFeature> autoCorrelationFeatureList = frameSet.GetAutoCorrelationSeries("AutoCorrelation", autoCorrelationOrder);
            soundFeatureSet.FeatureList.AddRange(autoCorrelationFeatureList);
            List<SoundFeature> lpcAndCepstralFeatureList = frameSet.GetLPCAndCepstralSeries("LPC", lpcOrder, "Cepstral", cepstralOrder);
            soundFeatureSet.FeatureList.AddRange(lpcAndCepstralFeatureList);
            SoundFeature relativeNumberOfZeroCrossingsFeature = frameSet.GetRelativeNumberOfZeroCrossingsSeries("RNZC");
            soundFeatureSet.FeatureList.Add(relativeNumberOfZeroCrossingsFeature);

            soundFeatureSet.SetNormalizedTime();
            soundFeatureSet.Interpolate(numberOfValuesPerFeature);

            IWRRecognitionResult recognitionResult = new IWRRecognitionResult();
            recognitionResult.SoundFeatureSet = soundFeatureSet;
            if (averageSoundFeatureSetList != null)
            {
                foreach (SoundFeatureSet averageSoundFeatureSet in averageSoundFeatureSetList)
                {
                    double deviation = SoundFeatureSet.GetDeviation(averageSoundFeatureSet, soundFeatureSet, weightList);
                    string soundName = averageSoundFeatureSet.Information;
                    recognitionResult.DeviationList.Add(new Tuple<string, double>(soundName, deviation));
                }
                recognitionResult.DeviationList.Sort((a, b) => a.Item2.CompareTo(b.Item2));
            }
            return recognitionResult;
        }

        public void AppendSound(string name, List<WAVSound> instanceList)
        {
            List<SoundFeatureSet> soundFeatureSetList = new List<SoundFeatureSet>();
            // Compute the sound feature set for each instance
            foreach (WAVSound soundInstance in instanceList)
            {
                soundInstance.SubtractMean();
                double startTime = soundInstance.GetFirstTimeAboveThreshold(0, soundExtractionMovingAverageLength, 
                                                                            soundExtractionThreshold);
                double endTime = soundInstance.GetLastTimeAboveThreshold(0, soundExtractionMovingAverageLength,
                                                                         soundExtractionThreshold);
                WAVSound extractedInstance = soundInstance.Extract(startTime, endTime);
                extractedInstance.PreEmphasize(preEmphasisThresholdFrequency);
                WAVFrameSet frameSet = new WAVFrameSet(extractedInstance, frameDuration, frameShift);
                frameSet.ApplyHammingWindows(alpha);
                SoundFeatureSet soundFeatureSet = new SoundFeatureSet();
                List<SoundFeature> autoCorrelationFeatureList = frameSet.GetAutoCorrelationSeries("AutoCorrelation", autoCorrelationOrder);
                soundFeatureSet.FeatureList.AddRange(autoCorrelationFeatureList);
                List<SoundFeature> lpcAndCepstralFeatureList = frameSet.GetLPCAndCepstralSeries("LPC", lpcOrder, "Cepstral", cepstralOrder);
                soundFeatureSet.FeatureList.AddRange(lpcAndCepstralFeatureList);
                SoundFeature relativeNumberOfZeroCrossingsFeature = frameSet.GetRelativeNumberOfZeroCrossingsSeries("RNZC");
                soundFeatureSet.FeatureList.Add(relativeNumberOfZeroCrossingsFeature);

                soundFeatureSet.SetNormalizedTime();
                soundFeatureSet.Interpolate(numberOfValuesPerFeature);
                soundFeatureSetList.Add(soundFeatureSet);
            }
            SoundFeatureSet averageSoundFeatureSet = SoundFeatureSet.GenerateAverage(soundFeatureSetList);
            averageSoundFeatureSet.Information = name; // The name of the stored sound.
            if (averageSoundFeatureSetList == null) { averageSoundFeatureSetList = new List<SoundFeatureSet>(); }
            averageSoundFeatureSetList.Add(averageSoundFeatureSet);
            averageSoundFeatureSetList.Sort((a, b) => a.Information.CompareTo(b.Information)); // Perhaps remove?
            OnAvailableSoundsChanged();
        }

        public void RemoveSound(string soundName)
        {
            int soundIndex = averageSoundFeatureSetList.FindIndex(t => t.Information == soundName);
            if (soundIndex >= 0)
            {
                averageSoundFeatureSetList.RemoveAt(soundIndex);
            }
            OnAvailableSoundsChanged();
        }

        public Boolean ContainsSound(string soundName)
        {
            if (averageSoundFeatureSetList == null) { return false; }
            for (int ii = 0; ii < averageSoundFeatureSetList.Count; ii++)
            {
                if (averageSoundFeatureSetList[ii].Information == soundName) {return true;}
            }
            return false; // Sound not found.
        }

        public List<string> GetAvailableSounds()
        {
            List<string> availableSoundsList = new List<string>();
            if (averageSoundFeatureSetList != null)
            {
                for (int ii = 0; ii < averageSoundFeatureSetList.Count; ii++)
                {
                    availableSoundsList.Add(averageSoundFeatureSetList[ii].Information);
                }
            }
            return availableSoundsList;
        }
        #endregion

        #region Properties
        [DataMember]
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        [DataMember]
        public int SoundExtractionMovingAverageLength
        {
            get { return soundExtractionMovingAverageLength; }
            set { soundExtractionMovingAverageLength = value; }
        }

        [DataMember]
        public double SoundExtractionThreshold
        {
            get { return soundExtractionThreshold; }
            set { soundExtractionThreshold = value; }
        }

        [DataMember]
        public double PreEmphasisThresholdFrequency
        {
            get { return preEmphasisThresholdFrequency; }
            set { preEmphasisThresholdFrequency = value; }
        }

        [DataMember]
        public double FrameDuration
        {
            get { return frameDuration; }
            set { frameDuration = value; }
        }

        [DataMember]
        public double FrameShift
        {
            get { return frameShift; }
            set { frameShift = value; }
        }

        [DataMember]
        public double Alpha
        {
            get { return alpha; }
            set { alpha = value; }
        }

        [DataMember]
        public int NumberOfValuesPerFeature
        {
            get { return numberOfValuesPerFeature; }
            set { numberOfValuesPerFeature = value; }
        }

        [DataMember]
        public int AutoCorrelationOrder
        {
            get { return autoCorrelationOrder; }
            set { autoCorrelationOrder = value; }
        }

        [DataMember]
        public int LPCOrder
        {
            get { return lpcOrder; }
            set { lpcOrder = value; }
        }

        [DataMember]
        public int CepstralOrder
        {
            get { return cepstralOrder; }
            set { cepstralOrder = value; }
        }

        [DataMember]
        public List<SoundFeatureSet> AverageSoundFeatureSetList
        {
            get { return averageSoundFeatureSetList; }
            set { averageSoundFeatureSetList = value; }
        }

        [DataMember]
        public List<double> WeightList
        {
            get { return weightList; }
            set { weightList = value; }
        }

        [DataMember]
        public double RecognitionThreshold
        {
            get { return recognitionThreshold; }
            set { recognitionThreshold = value; }
        }
        #endregion
    }
}
